// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesAndSeries.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MoviesAndSeries.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250912093930_ProfileImageNull")]
    partial class ProfileImageNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeNo")
                        .HasColumnType("integer");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeasonNo")
                        .HasColumnType("integer");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FavoriteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.GenreMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.ToTable("GenreMaps");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.PlatformMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("SeriesId");

                    b.ToTable("PlatformMaps");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.WatchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingTime")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchHistories");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Episode", b =>
                {
                    b.HasOne("MoviesAndSeries.Models.Entities.Movie", "Movie")
                        .WithMany("Episodes")
                        .HasForeignKey("MovieId");

                    b.HasOne("MoviesAndSeries.Models.Entities.Series", "Series")
                        .WithMany("Episodes")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Movie");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Favorite", b =>
                {
                    b.HasOne("MoviesAndSeries.Models.Entities.Movie", "Movie")
                        .WithMany("Favorites")
                        .HasForeignKey("MovieId");

                    b.HasOne("MoviesAndSeries.Models.Entities.Series", "Series")
                        .WithMany("Favorites")
                        .HasForeignKey("SeriesId");

                    b.HasOne("MoviesAndSeries.Models.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.GenreMap", b =>
                {
                    b.HasOne("MoviesAndSeries.Models.Entities.Genre", "Genre")
                        .WithMany("GenreMaps")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesAndSeries.Models.Entities.Movie", "Movie")
                        .WithMany("GenreMaps")
                        .HasForeignKey("MovieId");

                    b.HasOne("MoviesAndSeries.Models.Entities.Series", "Series")
                        .WithMany("GenreMaps")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Genre");

                    b.Navigation("Movie");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.PlatformMap", b =>
                {
                    b.HasOne("MoviesAndSeries.Models.Entities.Movie", "Movie")
                        .WithMany("PlatformMaps")
                        .HasForeignKey("MovieId");

                    b.HasOne("MoviesAndSeries.Models.Entities.Platform", "Platform")
                        .WithMany("PlatformMaps")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesAndSeries.Models.Entities.Series", "Series")
                        .WithMany("PlatformMaps")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Movie");

                    b.Navigation("Platform");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Rating", b =>
                {
                    b.HasOne("MoviesAndSeries.Models.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId");

                    b.HasOne("MoviesAndSeries.Models.Entities.Series", "Series")
                        .WithMany("Ratings")
                        .HasForeignKey("SeriesId");

                    b.HasOne("MoviesAndSeries.Models.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.WatchHistory", b =>
                {
                    b.HasOne("MoviesAndSeries.Models.Entities.Episode", "Episode")
                        .WithMany("WatchHistories")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesAndSeries.Models.Entities.User", "User")
                        .WithMany("WatchHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Episode", b =>
                {
                    b.Navigation("WatchHistories");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Genre", b =>
                {
                    b.Navigation("GenreMaps");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Movie", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Favorites");

                    b.Navigation("GenreMaps");

                    b.Navigation("PlatformMaps");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Platform", b =>
                {
                    b.Navigation("PlatformMaps");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.Series", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Favorites");

                    b.Navigation("GenreMaps");

                    b.Navigation("PlatformMaps");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MoviesAndSeries.Models.Entities.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Ratings");

                    b.Navigation("WatchHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
